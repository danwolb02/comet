--- ../include/comet/pch.hpp	(original)
+++ ../include/comet/pch.hpp	(reformatted)
@@ -1,6 +1,6 @@
 #include <map>
 #include <memory>
+#include <ostream>
 #include <stdexcept>
 #include <string>
 #include <vector>
-#include <ostream>
--- ../include/comet/base.hpp	(original)
+++ ../include/comet/base.hpp	(reformatted)
@@ -5,9 +5,9 @@
 namespace comet
 {
 template <typename Type>
-constexpr typename std::remove_reference<Type>::type && move(Type &object)
+constexpr typename std::remove_reference<Type>::type &&move(Type &object)
 {
-    return std::move(object);
+	return std::move(object);
 }
 
 } // namespace comet
--- ../include/comet/external.hpp	(original)
+++ ../include/comet/external.hpp	(reformatted)
@@ -2,51 +2,49 @@
 
 #define GLFW_INCLUDE_NONE
 
+#include <GL/glew.h>
+#include <GLFW/glfw3.h>
 #include <comet/types.hpp>
 
-#include <GL/glew.h>
-#include <GLFW/glfw3.h>
-
-#define GL_CALL(...)                                                                 \
-    while (glGetError() != GL_NO_ERROR)                                              \
-        ;                                                                            \
-    __VA_ARGS__;                                                                     \
-    if (auto error_code = glGetError())                                              \
-    {                                                                                \
-        String error_name;                                                           \
-                                                                                     \
-        switch (error_code)                                                          \
-        {                                                                            \
-        case 0x0500:                                                                 \
-            error_name = "GL_INVALID_ENUM";                                          \
-            break;                                                                   \
-        case 0x0501:                                                                 \
-            error_name = "GL_INVALID_VALUE";                                         \
-            break;                                                                   \
-        case 0x0502:                                                                 \
-            error_name = "GL_INVALID_OPERATION";                                     \
-            break;                                                                   \
-        case 0x0503:                                                                 \
-            error_name = "GL_STACK_OVERFLOW";                                        \
-            break;                                                                   \
-        case 0x0504:                                                                 \
-            error_name = "GL_STACK_UNDERFLOW";                                       \
-            break;                                                                   \
-        case 0x0505:                                                                 \
-            error_name = "GL_OUT_OF_MEMORY";                                         \
-            break;                                                                   \
-        case 0x0506:                                                                 \
-            error_name = "GL_INVALID_FRAMEBUFFER_OPERATION";                         \
-            break;                                                                   \
-        case 0x0507:                                                                 \
-            error_name = "GL_CONTEXT_LOST";                                          \
-            break;                                                                   \
-        case 0x8031:                                                                 \
-            error_name = "GL_TABLE_TOO_LARGE";                                       \
-            break;                                                                   \
-        }                                                                            \
-                                                                                     \
-        throw comet::RuntimeError("An OpenGL error occurred (" + error_name + ")."); \
-    }
+#define GL_CALL(...)                                                           \
+	while (glGetError() != GL_NO_ERROR)                                        \
+		;                                                                      \
+	__VA_ARGS__;                                                               \
+	if (auto error_code = glGetError()) {                                      \
+		String error_name;                                                     \
+                                                                               \
+		switch (error_code) {                                                  \
+		case 0x0500:                                                           \
+			error_name = "GL_INVALID_ENUM";                                    \
+			break;                                                             \
+		case 0x0501:                                                           \
+			error_name = "GL_INVALID_VALUE";                                   \
+			break;                                                             \
+		case 0x0502:                                                           \
+			error_name = "GL_INVALID_OPERATION";                               \
+			break;                                                             \
+		case 0x0503:                                                           \
+			error_name = "GL_STACK_OVERFLOW";                                  \
+			break;                                                             \
+		case 0x0504:                                                           \
+			error_name = "GL_STACK_UNDERFLOW";                                 \
+			break;                                                             \
+		case 0x0505:                                                           \
+			error_name = "GL_OUT_OF_MEMORY";                                   \
+			break;                                                             \
+		case 0x0506:                                                           \
+			error_name = "GL_INVALID_FRAMEBUFFER_OPERATION";                   \
+			break;                                                             \
+		case 0x0507:                                                           \
+			error_name = "GL_CONTEXT_LOST";                                    \
+			break;                                                             \
+		case 0x8031:                                                           \
+			error_name = "GL_TABLE_TOO_LARGE";                                 \
+			break;                                                             \
+		}                                                                      \
+                                                                               \
+		throw comet::RuntimeError("An OpenGL error occurred (" + error_name +  \
+								  ").");                                       \
+	}
 
 #endif
--- ../include/comet/graphics/window.hpp	(original)
+++ ../include/comet/graphics/window.hpp	(reformatted)
@@ -6,17 +6,17 @@
 {
 class Window
 {
-public:
-    Window(const u32 width, const u32 height, const String &title);
+  public:
+	Window(const u32 width, const u32 height, const String &title);
 
-    ~Window();
+	~Window();
 
-    auto update() -> void;
+	auto update() -> void;
 
-    auto should_close() -> bool;
+	auto should_close() -> bool;
 
-private:
-    void *handle = nullptr;
+  private:
+	void *handle = nullptr;
 };
 
-}
+} // namespace comet
--- ../include/comet/graphics/primitives/vertex_buffer.hpp	(original)
+++ ../include/comet/graphics/primitives/vertex_buffer.hpp	(reformatted)
@@ -6,27 +6,28 @@
 {
 class VertexBuffer
 {
-public:
-    explicit VertexBuffer(const Vec<f32> &data);
+  public:
+	explicit VertexBuffer(const Vec<f32> &data);
 
-    VertexBuffer(const VertexBuffer &other) = delete;
+	VertexBuffer(const VertexBuffer &other) = delete;
 
-    VertexBuffer(VertexBuffer &&other);
+	VertexBuffer(VertexBuffer &&other);
 
-    ~VertexBuffer();
+	~VertexBuffer();
 
-    auto operator=(const VertexBuffer &other) -> VertexBuffer & = delete;
+	auto operator=(const VertexBuffer &other) -> VertexBuffer & = delete;
 
-    auto operator=(VertexBuffer &&other) -> VertexBuffer &;
+	auto operator=(VertexBuffer &&other) -> VertexBuffer &;
 
-    auto release() -> void;
+	auto release() -> void;
 
-    auto bind() const -> void;
+	auto bind() const -> void;
 
-    friend auto operator<<(OutputStream &output_stream, const VertexBuffer &vertex_buffer) -> OutputStream &;
+	friend auto operator<<(OutputStream &output_stream,
+						   const VertexBuffer &vertex_buffer) -> OutputStream &;
 
-private:
-    u32 handle = 0;
+  private:
+	u32 handle = 0;
 };
 
-}
+} // namespace comet
--- ../include/comet/graphics/primitives/vertex_array.hpp	(original)
+++ ../include/comet/graphics/primitives/vertex_array.hpp	(reformatted)
@@ -8,35 +8,37 @@
 {
 class VertexArray
 {
-public:
-    explicit VertexArray(IndexBuffer &&index_buffer);
+  public:
+	explicit VertexArray(IndexBuffer &&index_buffer);
 
-    VertexArray(const VertexArray &other) = delete;
+	VertexArray(const VertexArray &other) = delete;
 
-    VertexArray(VertexArray &&other);
+	VertexArray(VertexArray &&other);
 
-    ~VertexArray();
+	~VertexArray();
 
-    auto operator=(const VertexArray &other) -> VertexArray & = delete;
+	auto operator=(const VertexArray &other) -> VertexArray & = delete;
 
-    auto operator=(VertexArray &&other) -> VertexArray &;
+	auto operator=(VertexArray &&other) -> VertexArray &;
 
-    auto release() -> void;
+	auto release() -> void;
 
-    auto bind() const -> void;
+	auto bind() const -> void;
 
-    auto upload(VertexBuffer &&vertex_buffer, u32 index, u32 size, u32 stride) -> void;
+	auto upload(VertexBuffer &&vertex_buffer, u32 index, u32 size, u32 stride)
+	-> void;
 
-    auto get_vertex_count() const -> u32;
+	auto get_vertex_count() const -> u32;
 
-    auto draw() const -> void;
+	auto draw() const -> void;
 
-    friend auto operator<<(OutputStream &output_stream, const VertexArray &vertex_array) -> OutputStream &;
+	friend auto operator<<(OutputStream &output_stream,
+						   const VertexArray &vertex_array) -> OutputStream &;
 
-private:
-    u32 handle = 0;
-    Map<u32, VertexBuffer> vertex_buffers;
-    IndexBuffer index_buffer;
+  private:
+	u32 handle = 0;
+	Map<u32, VertexBuffer> vertex_buffers;
+	IndexBuffer index_buffer;
 };
 
 } // namespace comet
--- ../include/comet/types.hpp	(original)
+++ ../include/comet/types.hpp	(reformatted)
@@ -4,48 +4,47 @@
 
 namespace comet
 {
-    using i8 = signed char;
-    using i16 = signed short int;
-    using i32 = signed int;
-    using i64 = signed long int;
+using i8 = signed char;
+using i16 = signed short int;
+using i32 = signed int;
+using i64 = signed long int;
 
-    using u8 = unsigned char;
-    using u16 = unsigned short int;
-    using u32 = unsigned int;
-    using u64 = unsigned long int;
+using u8 = unsigned char;
+using u16 = unsigned short int;
+using u32 = unsigned int;
+using u64 = unsigned long int;
 
-    using f32 = float;
-    using f64 = double;
+using f32 = float;
+using f64 = double;
 
-    using String = std::string;
+using String = std::string;
 
-    template <typename Type>
-    using Vec = std::vector<Type>;
+template <typename Type>
+using Vec = std::vector<Type>;
 
-    template <typename Type>
-    using Rc = std::shared_ptr<Type>;
+template <typename Type>
+using Rc = std::shared_ptr<Type>;
 
-    using RuntimeError = std::runtime_error;
+using RuntimeError = std::runtime_error;
 
-    template <typename Type1, typename Type2>
-    using Map = std::map<Type1, Type2>;
+template <typename Type1, typename Type2>
+using Map = std::map<Type1, Type2>;
 
-    using OutputStream = std::ostream;
+using OutputStream = std::ostream;
 
-    template <typename Type1, typename Type2>
-    auto operator<<(OutputStream &output_stream, const Map<Type1, Type2> &map) -> OutputStream &
-    {
-        output_stream << "{ ";
+template <typename Type1, typename Type2>
+auto operator<<(OutputStream &output_stream, const Map<Type1, Type2> &map)
+-> OutputStream &
+{
+	output_stream << "{ ";
 
-        for (auto it = map.begin(); it != map.end(); it++)
-        {
-            output_stream << "{ index: " << it->first
-                          << ", vertex_array: " << it->second
-                          << " } ";
-        }
+	for (auto it = map.begin(); it != map.end(); it++) {
+		output_stream << "{ index: " << it->first
+					  << ", vertex_array: " << it->second << " } ";
+	}
 
-        output_stream << "}";
-        return output_stream;
-    }
+	output_stream << "}";
+	return output_stream;
+}
 
 } // namespace comet
--- ../include/comet/graphics/renderer.hpp	(original)
+++ ../include/comet/graphics/renderer.hpp	(reformatted)
@@ -7,12 +7,12 @@
 {
 class Renderer
 {
-public:
-    Renderer();
+  public:
+	Renderer();
 
-    ~Renderer() = default;
+	~Renderer() = default;
 
-    auto render(const VertexArray &vertex_array, const Shader &shader) -> void;
+	auto render(const VertexArray &vertex_array, const Shader &shader) -> void;
 };
 
-}
+} // namespace comet
--- ../test/sandbox/source/main.cpp	(original)
+++ ../test/sandbox/source/main.cpp	(reformatted)
@@ -1,20 +1,20 @@
 #include <comet/base.hpp>
+#include <comet/graphics/renderer.hpp>
 #include <comet/graphics/window.hpp>
-#include <comet/graphics/renderer.hpp>
 
 using namespace comet;
 
 int main()
 {
-    Window window(1280, 720, "Comet Application");
-    VertexBuffer vertex_buffer({-0.5f, -0.5f, 0.5f, -0.5f, 0.0f,  0.5f });
-    IndexBuffer index_buffer({0, 1, 2});
-    VertexArray vertex_array(move(index_buffer));
-    vertex_array.upload(move(vertex_buffer), 0, 2, 0);
+	Window window(1280, 720, "Comet Application");
+	VertexBuffer vertex_buffer({-0.5f, -0.5f, 0.5f, -0.5f, 0.0f, 0.5f});
+	IndexBuffer index_buffer({0, 1, 2});
+	VertexArray vertex_array(move(index_buffer));
+	vertex_array.upload(move(vertex_buffer), 0, 2, 0);
 
-    Renderer renderer;
+	Renderer renderer;
 
-    String vertex_source = R"(
+	String vertex_source = R"(
     #version 410 core
 
     layout (location = 0) in vec2 position_vertex;
@@ -25,7 +25,7 @@
     }
     )";
 
-    String fragment_source = R"(
+	String fragment_source = R"(
     #version 410 core
 
     out vec4 out_color;
@@ -36,13 +36,12 @@
     }
     )";
 
-    Shader shader(vertex_source, fragment_source);
+	Shader shader(vertex_source, fragment_source);
 
-    while (!window.should_close())
-    {
-        window.update();
-        renderer.render(vertex_array, shader);
-    }
+	while (!window.should_close()) {
+		window.update();
+		renderer.render(vertex_array, shader);
+	}
 
-    return 0;
+	return 0;
 }
--- ../include/comet/mathematics/matrix.hpp	(original)
+++ ../include/comet/mathematics/matrix.hpp	(reformatted)
@@ -6,31 +6,37 @@
 {
 class Matrix4f
 {
-public:
-    Matrix4f() = default;
+  public:
+	Matrix4f() = default;
 
-    explicit Matrix4f(const f32 diagonal);
+	explicit Matrix4f(const f32 diagonal);
 
-    ~Matrix4f() = default;
+	~Matrix4f() = default;
 
-    auto multiply(const Matrix4f &other) const -> Matrix4f;
+	auto multiply(const Matrix4f &other) const -> Matrix4f;
 
-    auto translate(const f32 x, const f32 y, const f32 z) const -> Matrix4f;
+	auto translate(const f32 x, const f32 y, const f32 z) const -> Matrix4f;
 
-    auto rotate(const f32 x, const f32 y, const f32 z) const -> Matrix4f;
+	auto rotate(const f32 x, const f32 y, const f32 z) const -> Matrix4f;
 
-    auto scale(const f32 x, const f32 y, const f32 z) const -> Matrix4f;
+	auto scale(const f32 x, const f32 y, const f32 z) const -> Matrix4f;
 
-    auto get_data() const -> const f32 *;
+	auto get_data() const -> const f32 *;
 
-    auto operator*(const Matrix4f &other) const -> Matrix4f;
+	auto operator*(const Matrix4f &other) const -> Matrix4f;
 
-    friend auto perspective(const f32 aspect, const f32 angle, const f32 near, const f32 far) -> Matrix4f;
+	friend auto perspective(const f32 aspect, const f32 angle, const f32 near,
+							const f32 far) -> Matrix4f;
 
-    friend auto orthographic(const f32 left, const f32 right, const f32 bottom, const f32 top, const f32 near, const f32 far) -> Matrix4f;
+	friend auto orthographic(const f32 left, const f32 right, const f32 bottom,
+							 const f32 top, const f32 near, const f32 far)
+	-> Matrix4f;
 
-private:
-    f32 data[4][4] = {{0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f}};
+  private:
+	f32 data[4][4] = {{0.0f, 0.0f, 0.0f, 0.0f},
+					  {0.0f, 0.0f, 0.0f, 0.0f},
+					  {0.0f, 0.0f, 0.0f, 0.0f},
+					  {0.0f, 0.0f, 0.0f, 0.0f}};
 };
 
-}
+} // namespace comet
--- ../include/comet/graphics/primitives/shader.hpp	(original)
+++ ../include/comet/graphics/primitives/shader.hpp	(reformatted)
@@ -6,27 +6,27 @@
 {
 class Shader
 {
-public:
-    Shader(const String &vertex_source, const String &fragment_source);
+  public:
+	Shader(const String &vertex_source, const String &fragment_source);
 
-    Shader(const Shader &other) = delete;
+	Shader(const Shader &other) = delete;
 
-    Shader(Shader &&other);
+	Shader(Shader &&other);
 
-    ~Shader();
+	~Shader();
 
-    auto operator=(const Shader &other) -> Shader & = delete;
+	auto operator=(const Shader &other) -> Shader & = delete;
 
-    auto operator=(Shader &&other) -> Shader &;
+	auto operator=(Shader &&other) -> Shader &;
 
-    auto release() -> void;
+	auto release() -> void;
 
-    auto use() const -> void;
+	auto use() const -> void;
 
-private:
-    auto compile_shader(const u32 type, const String &source) const -> u32;
+  private:
+	auto compile_shader(const u32 type, const String &source) const -> u32;
 
-    u32 handle;
+	u32 handle;
 };
 
-}
+} // namespace comet
--- ../include/comet/graphics/primitives/index_buffer.hpp	(original)
+++ ../include/comet/graphics/primitives/index_buffer.hpp	(reformatted)
@@ -6,30 +6,31 @@
 {
 class IndexBuffer
 {
-public:
-    explicit IndexBuffer(const Vec<u32> &indices);
+  public:
+	explicit IndexBuffer(const Vec<u32> &indices);
 
-    IndexBuffer(const IndexBuffer &other) = delete;
+	IndexBuffer(const IndexBuffer &other) = delete;
 
-    IndexBuffer(IndexBuffer &&other);
+	IndexBuffer(IndexBuffer &&other);
 
-    ~IndexBuffer();
+	~IndexBuffer();
 
-    auto operator=(const IndexBuffer &other) -> IndexBuffer & = delete;
+	auto operator=(const IndexBuffer &other) -> IndexBuffer & = delete;
 
-    auto operator=(IndexBuffer &&other) -> IndexBuffer &;
+	auto operator=(IndexBuffer &&other) -> IndexBuffer &;
 
-    auto release() -> void;
+	auto release() -> void;
 
-    auto bind() const -> void;
+	auto bind() const -> void;
 
-    auto get_vertex_count() const -> u32;
+	auto get_vertex_count() const -> u32;
 
-    friend auto operator<<(OutputStream &output_stream, const IndexBuffer &index_buffer) -> OutputStream &;
+	friend auto operator<<(OutputStream &output_stream,
+						   const IndexBuffer &index_buffer) -> OutputStream &;
 
-private:
-    u32 handle = 0;
-    u32 vertex_count;
+  private:
+	u32 handle = 0;
+	u32 vertex_count;
 };
 
-}
+} // namespace comet
--- ../source/comet/graphics/renderer.cpp	(original)
+++ ../source/comet/graphics/renderer.cpp	(reformatted)
@@ -1,22 +1,22 @@
 #define COMET_IMPLEMENTATION
-
-#include <iostream>
 
 #include <comet/external.hpp>
 #include <comet/graphics/renderer.hpp>
+#include <iostream>
 
 namespace comet
 {
 Renderer::Renderer()
 {
-    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
+	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
 }
 
-auto Renderer::render(const VertexArray &vertex_array, const Shader &shader) -> void
+auto Renderer::render(const VertexArray &vertex_array, const Shader &shader)
+-> void
 {
-    GL_CALL(glClear(GL_COLOR_BUFFER_BIT));
-    shader.use();
-    vertex_array.draw();
+	GL_CALL(glClear(GL_COLOR_BUFFER_BIT));
+	shader.use();
+	vertex_array.draw();
 }
 
-}
+} // namespace comet
--- ../source/comet/graphics/primitives/vertex_buffer.cpp	(original)
+++ ../source/comet/graphics/primitives/vertex_buffer.cpp	(reformatted)
@@ -7,52 +7,52 @@
 {
 VertexBuffer::VertexBuffer(const Vec<f32> &data)
 {
-    GL_CALL(glGenBuffers(1, &handle));
-    if (!handle) throw RuntimeError("Unable to create vertex buffer.");
+	GL_CALL(glGenBuffers(1, &handle));
+	if (!handle) throw RuntimeError("Unable to create vertex buffer.");
 
-    bind();
-    GL_CALL(glBufferData(GL_ARRAY_BUFFER, data.size() * sizeof(f32), &data[0], GL_STATIC_DRAW));
+	bind();
+	GL_CALL(glBufferData(GL_ARRAY_BUFFER, data.size() * sizeof(f32), &data[0],
+						 GL_STATIC_DRAW));
 }
 
 VertexBuffer::VertexBuffer(VertexBuffer &&other)
 : handle(other.handle)
 {
-    other.handle = 0;
+	other.handle = 0;
 }
 
 VertexBuffer::~VertexBuffer()
 {
-    release();
+	release();
 }
 
 auto VertexBuffer::operator=(VertexBuffer &&other) -> VertexBuffer &
 {
-    if (this != &other)
-    {
-        release();
-        handle = other.handle;
-        other.handle = 0;
-    }
+	if (this != &other) {
+		release();
+		handle = other.handle;
+		other.handle = 0;
+	}
 
-    return *this;
+	return *this;
 }
 
 auto VertexBuffer::release() -> void
 {
-    if (handle) glDeleteBuffers(1, &handle);
-    handle = 0;
+	if (handle) glDeleteBuffers(1, &handle);
+	handle = 0;
 }
 
 auto VertexBuffer::bind() const -> void
 {
-    GL_CALL(glBindBuffer(GL_ARRAY_BUFFER, handle));
+	GL_CALL(glBindBuffer(GL_ARRAY_BUFFER, handle));
 }
 
-auto operator<<(OutputStream &output_stream, const VertexBuffer &vertex_buffer) -> OutputStream &
+auto operator<<(OutputStream &output_stream, const VertexBuffer &vertex_buffer)
+-> OutputStream &
 {
-    output_stream << "{ handle: " << vertex_buffer.handle
-                  << " }";
-    return output_stream;
+	output_stream << "{ handle: " << vertex_buffer.handle << " }";
+	return output_stream;
 }
 
-}
+} // namespace comet
--- ../source/comet/graphics/window.cpp	(original)
+++ ../source/comet/graphics/window.cpp	(reformatted)
@@ -7,39 +7,39 @@
 {
 Window::Window(const u32 width, const u32 height, const String &title)
 {
-    if (!glfwInit()) throw RuntimeError("Unable to initialize GLFW.");
+	if (!glfwInit()) throw RuntimeError("Unable to initialize GLFW.");
 
-    glfwDefaultWindowHints();
-    glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE);
-    glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
-    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
-    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
+	glfwDefaultWindowHints();
+	glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE);
+	glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
+	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
+	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
 
-    handle = glfwCreateWindow(width, height, (const char *)title.c_str(), nullptr, nullptr);
-    if (!handle) throw RuntimeError("Unable to create window.");
+	handle = glfwCreateWindow(width, height, (const char *) title.c_str(),
+							  nullptr, nullptr);
+	if (!handle) throw RuntimeError("Unable to create window.");
 
-    glfwMakeContextCurrent((GLFWwindow *)handle);
-    glfwSwapInterval(1);
+	glfwMakeContextCurrent((GLFWwindow *) handle);
+	glfwSwapInterval(1);
 
-    if (glewInit()) throw RuntimeError("Unable to initialize GLEW.");
+	if (glewInit()) throw RuntimeError("Unable to initialize GLEW.");
 }
 
 Window::~Window()
 {
-    glfwDestroyWindow((GLFWwindow *)handle);
-    glfwTerminate();
+	glfwDestroyWindow((GLFWwindow *) handle);
+	glfwTerminate();
 }
 
 auto Window::update() -> void
 {
-    glfwPollEvents();
-    glfwSwapBuffers((GLFWwindow *)handle);
+	glfwPollEvents();
+	glfwSwapBuffers((GLFWwindow *) handle);
 }
 
 auto Window::should_close() -> bool
 {
-    return glfwWindowShouldClose((GLFWwindow *)handle);
+	return glfwWindowShouldClose((GLFWwindow *) handle);
 }
 
 } // namespace comet
-
--- ../source/comet/graphics/primitives/index_buffer.cpp	(original)
+++ ../source/comet/graphics/primitives/index_buffer.cpp	(reformatted)
@@ -8,60 +8,60 @@
 IndexBuffer::IndexBuffer(const Vec<u32> &indices)
 : vertex_count(indices.size())
 {
-    GL_CALL(glGenBuffers(1, &handle));
-    if (!handle) throw RuntimeError("Unable to create vertex buffer.");
+	GL_CALL(glGenBuffers(1, &handle));
+	if (!handle) throw RuntimeError("Unable to create vertex buffer.");
 
-    bind();
-    GL_CALL(glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(u32), indices.data(), GL_STATIC_DRAW));
+	bind();
+	GL_CALL(glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(u32),
+						 indices.data(), GL_STATIC_DRAW));
 }
 
 IndexBuffer::IndexBuffer(IndexBuffer &&other)
 : handle(other.handle)
 , vertex_count(other.vertex_count)
 {
-    other.handle = 0;
+	other.handle = 0;
 }
 
 IndexBuffer::~IndexBuffer()
 {
-    release();
+	release();
 }
 
 auto IndexBuffer::operator=(IndexBuffer &&other) -> IndexBuffer &
 {
-    if (this != &other)
-    {
-        release();
-        handle = other.handle;
-        vertex_count = other.vertex_count;
-        other.handle = 0;
-        other.vertex_count = 0;
-    }
+	if (this != &other) {
+		release();
+		handle = other.handle;
+		vertex_count = other.vertex_count;
+		other.handle = 0;
+		other.vertex_count = 0;
+	}
 
-    return *this;
+	return *this;
 }
 
 auto IndexBuffer::release() -> void
 {
-    if (handle) glDeleteBuffers(1, &handle);
+	if (handle) glDeleteBuffers(1, &handle);
 }
 
 auto IndexBuffer::bind() const -> void
 {
-    GL_CALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle));
+	GL_CALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle));
 }
 
 auto IndexBuffer::get_vertex_count() const -> u32
 {
-    return vertex_count;
+	return vertex_count;
 }
 
-auto operator<<(OutputStream &output_stream, const IndexBuffer &index_buffer) -> OutputStream &
+auto operator<<(OutputStream &output_stream, const IndexBuffer &index_buffer)
+-> OutputStream &
 {
-    output_stream << "{ handle: " << index_buffer.handle
-                  << ", vertex_count: " << index_buffer.vertex_count
-                  << " }";
-    return output_stream;
+	output_stream << "{ handle: " << index_buffer.handle
+				  << ", vertex_count: " << index_buffer.vertex_count << " }";
+	return output_stream;
 }
 
-}
+} // namespace comet
--- ../source/comet/graphics/primitives/vertex_array.cpp	(original)
+++ ../source/comet/graphics/primitives/vertex_array.cpp	(reformatted)
@@ -9,7 +9,7 @@
 VertexArray::VertexArray(IndexBuffer &&index_buffer)
 : index_buffer(move(index_buffer))
 {
-    GL_CALL(glGenVertexArrays(1, &handle));
+	GL_CALL(glGenVertexArrays(1, &handle));
 }
 
 VertexArray::VertexArray(VertexArray &&other)
@@ -17,73 +17,74 @@
 , vertex_buffers(std::move(other.vertex_buffers))
 , index_buffer(move(other.index_buffer))
 {
-    other.handle = 0;
+	other.handle = 0;
 }
 
 VertexArray::~VertexArray()
 {
-    release();
+	release();
 }
 
 auto VertexArray::operator=(VertexArray &&other) -> VertexArray &
 {
-    if (this != &other)
-    {
-        release();
-        handle = other.handle;
-        vertex_buffers = move(other.vertex_buffers);
-        index_buffer = move(other.index_buffer);
-    }
+	if (this != &other) {
+		release();
+		handle = other.handle;
+		vertex_buffers = move(other.vertex_buffers);
+		index_buffer = move(other.index_buffer);
+	}
 
-    return *this;
+	return *this;
 }
 
 auto VertexArray::release() -> void
 {
-    glDeleteVertexArrays(1, &handle);
+	glDeleteVertexArrays(1, &handle);
 }
 
 auto VertexArray::bind() const -> void
 {
-    glBindVertexArray(handle);
+	glBindVertexArray(handle);
 }
 
-auto VertexArray::upload(VertexBuffer &&vertex_buffer, u32 index, u32 size, u32 stride) -> void
+auto VertexArray::upload(VertexBuffer &&vertex_buffer, u32 index, u32 size,
+						 u32 stride) -> void
 {
-    bind();
-    vertex_buffer.bind();
+	bind();
+	vertex_buffer.bind();
 
-    GL_CALL(glEnableVertexAttribArray(index));
-    GL_CALL(glVertexAttribPointer(index, size, GL_FLOAT, false, stride, nullptr));
+	GL_CALL(glEnableVertexAttribArray(index));
+	GL_CALL(
+	glVertexAttribPointer(index, size, GL_FLOAT, false, stride, nullptr));
 
-    vertex_buffers.insert(std::make_pair(index, move(vertex_buffer)));
+	vertex_buffers.insert(std::make_pair(index, move(vertex_buffer)));
 }
 
 auto VertexArray::get_vertex_count() const -> u32
 {
-    return index_buffer.get_vertex_count();
+	return index_buffer.get_vertex_count();
 }
 
 auto VertexArray::draw() const -> void
 {
-    bind();
-    index_buffer.bind();
+	bind();
+	index_buffer.bind();
 
-    for (auto &&entry : vertex_buffers)
-    {
-        GL_CALL(glEnableVertexAttribArray(entry.first));
-    }
+	for (auto &&entry : vertex_buffers) {
+		GL_CALL(glEnableVertexAttribArray(entry.first));
+	}
 
-    GL_CALL(glDrawElements(GL_TRIANGLES, get_vertex_count(), GL_UNSIGNED_INT, nullptr));
+	GL_CALL(
+	glDrawElements(GL_TRIANGLES, get_vertex_count(), GL_UNSIGNED_INT, nullptr));
 }
 
-auto operator<<(OutputStream &output_stream, const VertexArray &vertex_array) -> OutputStream &
+auto operator<<(OutputStream &output_stream, const VertexArray &vertex_array)
+-> OutputStream &
 {
-    output_stream << "{ handle: " << vertex_array.handle
-                  << ", vertex_buffers: " << vertex_array.vertex_buffers
-                  << ", index_buffer: " << vertex_array.index_buffer
-                  << " }";
-    return output_stream;
+	output_stream << "{ handle: " << vertex_array.handle
+				  << ", vertex_buffers: " << vertex_array.vertex_buffers
+				  << ", index_buffer: " << vertex_array.index_buffer << " }";
+	return output_stream;
 }
 
-}
+} // namespace comet
--- ../source/comet/mathematics/matrix.cpp	(original)
+++ ../source/comet/mathematics/matrix.cpp	(reformatted)
@@ -7,104 +7,104 @@
 {
 Matrix4f::Matrix4f(const f32 diagonal)
 {
-    data[0][0] = diagonal;
-    data[1][1] = diagonal;
-    data[2][2] = diagonal;
-    data[3][3] = diagonal;
+	data[0][0] = diagonal;
+	data[1][1] = diagonal;
+	data[2][2] = diagonal;
+	data[3][3] = diagonal;
 }
 
 auto Matrix4f::multiply(const Matrix4f &other) const -> Matrix4f
 {
-    Matrix4f ret;
+	Matrix4f ret;
 
-    for (int i = 0; i < 4; i++)
-    {
-        for (int j = 0; j < 4; j++)
-        {
-            for (int k = 0; k < 4; k++)
-            {
-                ret.data[i][j] += data[k][j] * other.data[i][k];
-            }
-        }
-    }
+	for (int i = 0; i < 4; i++) {
+		for (int j = 0; j < 4; j++) {
+			for (int k = 0; k < 4; k++) {
+				ret.data[i][j] += data[k][j] * other.data[i][k];
+			}
+		}
+	}
 
-    return ret;
+	return ret;
 }
 
-auto Matrix4f::translate(const f32 x, const f32 y, const f32 z) const -> Matrix4f
+auto Matrix4f::translate(const f32 x, const f32 y, const f32 z) const
+-> Matrix4f
 {
-    Matrix4f ret(1.0f);
+	Matrix4f ret(1.0f);
 
-    ret.data[3][0] = x;
-    ret.data[3][1] = y;
-    ret.data[3][2] = z;
+	ret.data[3][0] = x;
+	ret.data[3][1] = y;
+	ret.data[3][2] = z;
 
-    return multiply(ret);
+	return multiply(ret);
 }
 
 auto Matrix4f::rotate(const f32 x, const f32 y, const f32 z) const -> Matrix4f
 {
-    Matrix4f ret(1.0f);
+	Matrix4f ret(1.0f);
 
-    ret.data[0][0] =  cos(-z) * cos(-y);
-    ret.data[0][1] =  cos(-z) * sin(-y) * sin(-x) - sin(-z) * cos(-x);
-    ret.data[0][2] =  cos(-z) * sin(-y) * cos(-x) + sin(-z) * sin(-x);
-    ret.data[1][0] =  sin(-z) * cos(-y);
-    ret.data[1][1] =  sin(-z) * sin(-y) * sin(-x) + cos(-z) * cos(-x);
-    ret.data[1][2] =  sin(-z) * sin(-y) * cos(-x) - cos(-z) * sin(-x);
-    ret.data[2][0] = -sin(-y);
-    ret.data[2][1] =  cos(-y) * sin(-x);
-    ret.data[2][2] =  cos(-y) * cos(-x);
+	ret.data[0][0] = cos(-z) * cos(-y);
+	ret.data[0][1] = cos(-z) * sin(-y) * sin(-x) - sin(-z) * cos(-x);
+	ret.data[0][2] = cos(-z) * sin(-y) * cos(-x) + sin(-z) * sin(-x);
+	ret.data[1][0] = sin(-z) * cos(-y);
+	ret.data[1][1] = sin(-z) * sin(-y) * sin(-x) + cos(-z) * cos(-x);
+	ret.data[1][2] = sin(-z) * sin(-y) * cos(-x) - cos(-z) * sin(-x);
+	ret.data[2][0] = -sin(-y);
+	ret.data[2][1] = cos(-y) * sin(-x);
+	ret.data[2][2] = cos(-y) * cos(-x);
 
-    return multiply(ret);
+	return multiply(ret);
 }
 
 auto Matrix4f::scale(const f32 x, const f32 y, const f32 z) const -> Matrix4f
 {
-    Matrix4f ret(1.0f);
+	Matrix4f ret(1.0f);
 
-    ret.data[0][0] = x;
-    ret.data[1][1] = y;
-    ret.data[2][2] = z;
+	ret.data[0][0] = x;
+	ret.data[1][1] = y;
+	ret.data[2][2] = z;
 
-    return multiply(ret);
+	return multiply(ret);
 }
 
 auto Matrix4f::get_data() const -> const f32 *
 {
-    return data[0];
+	return data[0];
 }
 
 auto Matrix4f::operator*(const Matrix4f &other) const -> Matrix4f
 {
-    return multiply(other);
+	return multiply(other);
 }
 
-auto perspective(const f32 aspect, const f32 angle, const f32 near, const f32 far) -> Matrix4f
+auto perspective(const f32 aspect, const f32 angle, const f32 near,
+				 const f32 far) -> Matrix4f
 {
-    Matrix4f ret(0.0f);
+	Matrix4f ret(0.0f);
 
-    ret.data[0][0] =  1.0f / (aspect * tan(angle / 2.0f));
-    ret.data[1][1] =  1.0f / (tan(angle / 2.0f));
-    ret.data[2][2] = -1.0f * ((near + far) / (far - near));
-    ret.data[2][3] = -1.0f;
-    ret.data[3][2] = (2.0f * far * near) / (near - far);
+	ret.data[0][0] = 1.0f / (aspect * tan(angle / 2.0f));
+	ret.data[1][1] = 1.0f / (tan(angle / 2.0f));
+	ret.data[2][2] = -1.0f * ((near + far) / (far - near));
+	ret.data[2][3] = -1.0f;
+	ret.data[3][2] = (2.0f * far * near) / (near - far);
 
-    return ret;
+	return ret;
 }
 
-auto orthographic(const f32 left, const f32 right, const f32 bottom, const f32 top, const f32 near, const f32 far) -> Matrix4f
+auto orthographic(const f32 left, const f32 right, const f32 bottom,
+				  const f32 top, const f32 near, const f32 far) -> Matrix4f
 {
-    Matrix4f ret(1.0f);
+	Matrix4f ret(1.0f);
 
-    ret.data[0][0] =  2.0f / (right - left);
-    ret.data[1][1] =  2.0f / (top - bottom);
-    ret.data[2][2] = -2.0f / (far - near);
-    ret.data[3][0] = -(right + left) / (right - left);
-    ret.data[3][1] = -(top + bottom) / (top - bottom);
-    ret.data[3][2] = -(far + near) / (far - near);
+	ret.data[0][0] = 2.0f / (right - left);
+	ret.data[1][1] = 2.0f / (top - bottom);
+	ret.data[2][2] = -2.0f / (far - near);
+	ret.data[3][0] = -(right + left) / (right - left);
+	ret.data[3][1] = -(top + bottom) / (top - bottom);
+	ret.data[3][2] = -(far + near) / (far - near);
 
-    return ret;
+	return ret;
 }
 
 } // namespace comet
--- ../source/comet/graphics/primitives/shader.cpp	(original)
+++ ../source/comet/graphics/primitives/shader.cpp	(reformatted)
@@ -8,75 +8,74 @@
 Shader::Shader(const String &vertex_source, const String &fragment_source)
 : handle(glCreateProgram())
 {
-    auto vertex_shader_handle = compile_shader(GL_VERTEX_SHADER, vertex_source);
-    auto fragment_shader_handle = compile_shader(GL_FRAGMENT_SHADER, fragment_source);
+	auto vertex_shader_handle = compile_shader(GL_VERTEX_SHADER, vertex_source);
+	auto fragment_shader_handle =
+	compile_shader(GL_FRAGMENT_SHADER, fragment_source);
 
-    GL_CALL(glAttachShader(handle, vertex_shader_handle));
-    GL_CALL(glAttachShader(handle, fragment_shader_handle));
-    GL_CALL(glLinkProgram(handle));
-    GL_CALL(glValidateProgram(handle));
+	GL_CALL(glAttachShader(handle, vertex_shader_handle));
+	GL_CALL(glAttachShader(handle, fragment_shader_handle));
+	GL_CALL(glLinkProgram(handle));
+	GL_CALL(glValidateProgram(handle));
 
-    GL_CALL(glDetachShader(handle, vertex_shader_handle));
-    GL_CALL(glDetachShader(handle, fragment_shader_handle));
+	GL_CALL(glDetachShader(handle, vertex_shader_handle));
+	GL_CALL(glDetachShader(handle, fragment_shader_handle));
 }
 
 Shader::Shader(Shader &&other)
 : handle(other.handle)
 {
-    other.handle = 0;
+	other.handle = 0;
 }
 
 Shader::~Shader()
 {
-    release();
+	release();
 }
 
 auto Shader::operator=(Shader &&other) -> Shader &
 {
-    if (this != &other)
-    {
-        release();
-        handle = other.handle;
-        other.handle = 0;
-    }
+	if (this != &other) {
+		release();
+		handle = other.handle;
+		other.handle = 0;
+	}
 
-    return *this;
+	return *this;
 }
 
 auto Shader::release() -> void
 {
-    GL_CALL(glDeleteProgram(handle));
+	GL_CALL(glDeleteProgram(handle));
 }
 
 auto Shader::use() const -> void
 {
-    GL_CALL(glUseProgram(handle));
+	GL_CALL(glUseProgram(handle));
 }
 
 auto Shader::compile_shader(const u32 type, const String &source) const -> u32
 {
-    u32 handle = glCreateShader(type);
-    auto source_pointer = source.c_str();
-    GL_CALL(glShaderSource(handle, 1, &source_pointer, nullptr));
-    GL_CALL(glCompileShader(handle));
+	u32 handle = glCreateShader(type);
+	auto source_pointer = source.c_str();
+	GL_CALL(glShaderSource(handle, 1, &source_pointer, nullptr));
+	GL_CALL(glCompileShader(handle));
 
-    int is_compiled = 0;
-    GL_CALL(glGetShaderiv(handle, GL_COMPILE_STATUS, &is_compiled));
+	int is_compiled = 0;
+	GL_CALL(glGetShaderiv(handle, GL_COMPILE_STATUS, &is_compiled));
 
-    if(is_compiled == false)
-    {
-      GLint max_length = 0;
-      GL_CALL(glGetShaderiv(handle, GL_INFO_LOG_LENGTH, &max_length));
+	if (is_compiled == false) {
+		GLint max_length = 0;
+		GL_CALL(glGetShaderiv(handle, GL_INFO_LOG_LENGTH, &max_length));
 
-      char* message = new char[max_length];
+		char *message = new char[max_length];
 
-      GL_CALL(glGetShaderInfoLog(handle, max_length, &max_length, message));
-      GL_CALL(glDeleteShader(handle));
+		GL_CALL(glGetShaderInfoLog(handle, max_length, &max_length, message));
+		GL_CALL(glDeleteShader(handle));
 
-      throw RuntimeError("Unable to compile shader: " + String(message));
-    }
+		throw RuntimeError("Unable to compile shader: " + String(message));
+	}
 
-    return handle;
+	return handle;
 }
 
-};
+}; // namespace comet
